/* Generated By:JJTree&JavaCC: Do not edit this line. Sili.java */
package parser.ast;
public class Sili/*@bgen(jjtree)*/implements SiliTreeConstants, SiliConstants {/*@bgen(jjtree)*/
  protected JJTSiliState jjtree = new JJTSiliState();

/***********************************************
 *          THE GRAMMAR STARTS HERE            *
 ***********************************************/
  final public ASTCode code() throws ParseException {
 /*@bgen(jjtree) Code */
  ASTCode jjtn000 = new ASTCode(JJTCODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      statement();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case FOR:
        case WHILE:
        case PRINT:
        case PRINTLN:
        case QUIT:
        case FUNCTION:
        case IDENTIFIER:
        case LBRACE:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        statement();
      }
      jj_consume_token(0);
                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                    jjtc000 = false;
                                                                   {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
                                if (jjtc000) {
                                  jjtree.clearNodeScope(jjtn000);
                                  jjtc000 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte000 instanceof RuntimeException) {
                                  {if (true) throw (RuntimeException)jjte000;}
                                }
                                if (jjte000 instanceof ParseException) {
                                  {if (true) throw (ParseException)jjte000;}
                                }
                                {if (true) throw (Error)jjte000;}
    } finally {
                                if (jjtc000) {
                                  jjtree.closeNodeScope(jjtn000, true);
                                }
    }
    throw new Error("Missing return statement in function");
  }

  final public void statement() throws ParseException {
 /*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(2)) {
        assignment();
      } else if (jj_2_2(3)) {
        arraysetindex();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
          fndef();
          break;
        case LBRACE:
          block();
          break;
        case IF:
          ifstatement();
          break;
        default:
          jj_la1[1] = jj_gen;
          if (jj_2_3(6)) {
            forloop();
          } else if (jj_2_4(6)) {
            fortoloop();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case WHILE:
              whileloop();
              break;
            case PRINT:
              print();
              break;
            case PRINTLN:
              println();
              break;
            case QUIT:
              quit();
              break;
            default:
              jj_la1[2] = jj_gen;
              if (jj_2_5(2)) {
                call();
              } else if (jj_2_6(2)) {
                array_function();
              } else {
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void block() throws ParseException {
 /*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case FOR:
        case WHILE:
        case PRINT:
        case PRINTLN:
        case QUIT:
        case FUNCTION:
        case IDENTIFIER:
        case LBRACE:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        statement();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void parmlist() throws ParseException {
 /*@bgen(jjtree) Parmlist */
  ASTParmlist jjtn000 = new ASTParmlist(JJTPARMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        identifier();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
          jj_consume_token(COMMA);
          identifier();
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void fnbody() throws ParseException {
 /*@bgen(jjtree) FnBody */
  ASTFnBody jjtn000 = new ASTFnBody(JJTFNBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case FOR:
        case WHILE:
        case PRINT:
        case PRINTLN:
        case QUIT:
        case FUNCTION:
        case IDENTIFIER:
        case LBRACE:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
        statement();
      }
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void fndef() throws ParseException {
 /*@bgen(jjtree) FnDef */
  ASTFnDef jjtn000 = new ASTFnDef(JJTFNDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FUNCTION);
      identifier();
      parmlist();
      jj_consume_token(LBRACE);
      fnbody();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURN:
        jj_consume_token(RETURN);
        returnexpr();
                                                                         jjtn000.fnHasReturn = true;
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void returnexpr() throws ParseException {
 /*@bgen(jjtree) ReturnExpression */
  ASTReturnExpression jjtn000 = new ASTReturnExpression(JJTRETURNEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      expression();
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void assignment() throws ParseException {
    if (jj_2_7(2)) {
      identifier();
      jj_consume_token(ASSIGN);
                                                                          ASTAssignment jjtn001 = new ASTAssignment(JJTASSIGNMENT);
                                                                          boolean jjtc001 = true;
                                                                          jjtree.openNodeScope(jjtn001);
      try {
        expression();
      } catch (Throwable jjte001) {
                                                                          if (jjtc001) {
                                                                            jjtree.clearNodeScope(jjtn001);
                                                                            jjtc001 = false;
                                                                          } else {
                                                                            jjtree.popNode();
                                                                          }
                                                                          if (jjte001 instanceof RuntimeException) {
                                                                            {if (true) throw (RuntimeException)jjte001;}
                                                                          }
                                                                          if (jjte001 instanceof ParseException) {
                                                                            {if (true) throw (ParseException)jjte001;}
                                                                          }
                                                                          {if (true) throw (Error)jjte001;}
      } finally {
                                                                          if (jjtc001) {
                                                                            jjtree.closeNodeScope(jjtn001,  2);
                                                                          }
      }
    } else if (jj_2_8(2)) {
      identifier();
      jj_consume_token(PEQ);
                                                                           ASTAdditionAssignment jjtn002 = new ASTAdditionAssignment(JJTADDITIONASSIGNMENT);
                                                                           boolean jjtc002 = true;
                                                                           jjtree.openNodeScope(jjtn002);
      try {
        expression();
      } catch (Throwable jjte002) {
                                                                           if (jjtc002) {
                                                                             jjtree.clearNodeScope(jjtn002);
                                                                             jjtc002 = false;
                                                                           } else {
                                                                             jjtree.popNode();
                                                                           }
                                                                           if (jjte002 instanceof RuntimeException) {
                                                                             {if (true) throw (RuntimeException)jjte002;}
                                                                           }
                                                                           if (jjte002 instanceof ParseException) {
                                                                             {if (true) throw (ParseException)jjte002;}
                                                                           }
                                                                           {if (true) throw (Error)jjte002;}
      } finally {
                                                                           if (jjtc002) {
                                                                             jjtree.closeNodeScope(jjtn002,  2);
                                                                           }
      }
    } else if (jj_2_9(2)) {
      identifier();
      jj_consume_token(MEQ);
                                                                           ASTSubtractionAssignment jjtn003 = new ASTSubtractionAssignment(JJTSUBTRACTIONASSIGNMENT);
                                                                           boolean jjtc003 = true;
                                                                           jjtree.openNodeScope(jjtn003);
      try {
        expression();
      } catch (Throwable jjte003) {
                                                                           if (jjtc003) {
                                                                             jjtree.clearNodeScope(jjtn003);
                                                                             jjtc003 = false;
                                                                           } else {
                                                                             jjtree.popNode();
                                                                           }
                                                                           if (jjte003 instanceof RuntimeException) {
                                                                             {if (true) throw (RuntimeException)jjte003;}
                                                                           }
                                                                           if (jjte003 instanceof ParseException) {
                                                                             {if (true) throw (ParseException)jjte003;}
                                                                           }
                                                                           {if (true) throw (Error)jjte003;}
      } finally {
                                                                           if (jjtc003) {
                                                                             jjtree.closeNodeScope(jjtn003,  2);
                                                                           }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void arraysetindex() throws ParseException {
    identifier();
    jj_consume_token(LBRACKET);
    expression();
    jj_consume_token(RBRACKET);
    jj_consume_token(ASSIGN);
                                                                                ASTArraySetIndex jjtn001 = new ASTArraySetIndex(JJTARRAYSETINDEX);
                                                                                boolean jjtc001 = true;
                                                                                jjtree.openNodeScope(jjtn001);
    try {
      expression();
    } catch (Throwable jjte001) {
                                                                                if (jjtc001) {
                                                                                  jjtree.clearNodeScope(jjtn001);
                                                                                  jjtc001 = false;
                                                                                } else {
                                                                                  jjtree.popNode();
                                                                                }
                                                                                if (jjte001 instanceof RuntimeException) {
                                                                                  {if (true) throw (RuntimeException)jjte001;}
                                                                                }
                                                                                if (jjte001 instanceof ParseException) {
                                                                                  {if (true) throw (ParseException)jjte001;}
                                                                                }
                                                                                {if (true) throw (Error)jjte001;}
    } finally {
                                                                                if (jjtc001) {
                                                                                  jjtree.closeNodeScope(jjtn001,  3);
                                                                                }
    }
  }

  final public void array_function() throws ParseException {
    if (jj_2_10(2)) {
      identifier();
      jj_consume_token(66);
      jj_consume_token(LPAREN);
      expression();
                                                                                           ASTArrayGetIndex jjtn001 = new ASTArrayGetIndex(JJTARRAYGETINDEX);
                                                                                           boolean jjtc001 = true;
                                                                                           jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                                                           if (jjtc001) {
                                                                                             jjtree.closeNodeScope(jjtn001,  2);
                                                                                           }
      }
    } else if (jj_2_11(2)) {
      identifier();
      jj_consume_token(67);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(COMMA);
      expression();
                                                                                                                    ASTArraySetIndex jjtn002 = new ASTArraySetIndex(JJTARRAYSETINDEX);
                                                                                                                    boolean jjtc002 = true;
                                                                                                                    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                                                                                    if (jjtc002) {
                                                                                                                      jjtree.closeNodeScope(jjtn002,  3);
                                                                                                                    }
      }
    } else if (jj_2_12(2)) {
      identifier();
      jj_consume_token(68);
      jj_consume_token(LPAREN);
      expression();
                                                                                               ASTArrayPush jjtn003 = new ASTArrayPush(JJTARRAYPUSH);
                                                                                               boolean jjtc003 = true;
                                                                                               jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                                                               if (jjtc003) {
                                                                                                 jjtree.closeNodeScope(jjtn003,  2);
                                                                                               }
      }
    } else if (jj_2_13(4)) {
      identifier();
      jj_consume_token(69);
      jj_consume_token(LPAREN);
                                                                                 ASTArrayPop jjtn004 = new ASTArrayPop(JJTARRAYPOP);
                                                                                 boolean jjtc004 = true;
                                                                                 jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                                                 if (jjtc004) {
                                                                                   jjtree.closeNodeScope(jjtn004,  1);
                                                                                 }
      }
    } else if (jj_2_14(2)) {
      identifier();
      jj_consume_token(70);
      jj_consume_token(LPAREN);
                                                                                    ASTArrayLength jjtn005 = new ASTArrayLength(JJTARRAYLENGTH);
                                                                                    boolean jjtc005 = true;
                                                                                    jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                                                    if (jjtc005) {
                                                                                      jjtree.closeNodeScope(jjtn005,  1);
                                                                                    }
      }
    } else if (jj_2_15(2)) {
      identifier();
      jj_consume_token(71);
      jj_consume_token(LPAREN);
                                                                                   ASTArrayPrint jjtn006 = new ASTArrayPrint(JJTARRAYPRINT);
                                                                                   boolean jjtc006 = true;
                                                                                   jjtree.openNodeScope(jjtn006);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                                                   if (jjtc006) {
                                                                                     jjtree.closeNodeScope(jjtn006,  1);
                                                                                   }
      }
    } else if (jj_2_16(2)) {
      identifier();
      jj_consume_token(72);
      jj_consume_token(LPAREN);
                                                                                   ASTArrayFirst jjtn007 = new ASTArrayFirst(JJTARRAYFIRST);
                                                                                   boolean jjtc007 = true;
                                                                                   jjtree.openNodeScope(jjtn007);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                                                   if (jjtc007) {
                                                                                     jjtree.closeNodeScope(jjtn007,  1);
                                                                                   }
      }
    } else if (jj_2_17(2)) {
      identifier();
      jj_consume_token(73);
      jj_consume_token(LPAREN);
                                                                                  ASTArrayLast jjtn008 = new ASTArrayLast(JJTARRAYLAST);
                                                                                  boolean jjtc008 = true;
                                                                                  jjtree.openNodeScope(jjtn008);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                                                  if (jjtc008) {
                                                                                    jjtree.closeNodeScope(jjtn008,  1);
                                                                                  }
      }
    } else if (jj_2_18(2)) {
      identifier();
      jj_consume_token(74);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(COMMA);
      expression();
                                                                                                                  ASTArrayInsert jjtn009 = new ASTArrayInsert(JJTARRAYINSERT);
                                                                                                                  boolean jjtc009 = true;
                                                                                                                  jjtree.openNodeScope(jjtn009);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                                                                                  if (jjtc009) {
                                                                                                                    jjtree.closeNodeScope(jjtn009,  3);
                                                                                                                  }
      }
    } else if (jj_2_19(2)) {
      identifier();
      jj_consume_token(75);
      jj_consume_token(LPAREN);
      expression();
                                                                                                 ASTArrayRemove jjtn010 = new ASTArrayRemove(JJTARRAYREMOVE);
                                                                                                 boolean jjtc010 = true;
                                                                                                 jjtree.openNodeScope(jjtn010);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                                                                 if (jjtc010) {
                                                                                                   jjtree.closeNodeScope(jjtn010,  2);
                                                                                                 }
      }
    } else if (jj_2_20(2)) {
      identifier();
      jj_consume_token(76);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(COMMA);
      expression();
                                                                                                               ASTDictPut jjtn011 = new ASTDictPut(JJTDICTPUT);
                                                                                                               boolean jjtc011 = true;
                                                                                                               jjtree.openNodeScope(jjtn011);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                                                                               if (jjtc011) {
                                                                                                                 jjtree.closeNodeScope(jjtn011,  3);
                                                                                                               }
      }
    } else if (jj_2_21(2)) {
      identifier();
      jj_consume_token(77);
      jj_consume_token(LPAREN);
      expression();
                                                                                              ASTDictGet jjtn012 = new ASTDictGet(JJTDICTGET);
                                                                                              boolean jjtc012 = true;
                                                                                              jjtree.openNodeScope(jjtn012);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                                                              if (jjtc012) {
                                                                                                jjtree.closeNodeScope(jjtn012,  2);
                                                                                              }
      }
    } else if (jj_2_22(4)) {
      identifier();
      jj_consume_token(69);
      jj_consume_token(LPAREN);
      expression();
                                                                                              ASTDictPop jjtn013 = new ASTDictPop(JJTDICTPOP);
                                                                                              boolean jjtc013 = true;
                                                                                              jjtree.openNodeScope(jjtn013);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                                                              if (jjtc013) {
                                                                                                jjtree.closeNodeScope(jjtn013,  2);
                                                                                              }
      }
    } else if (jj_2_23(2)) {
      identifier();
      jj_consume_token(78);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(COMMA);
      expression();
                                                                                                                   ASTDictReplace jjtn014 = new ASTDictReplace(JJTDICTREPLACE);
                                                                                                                   boolean jjtc014 = true;
                                                                                                                   jjtree.openNodeScope(jjtn014);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                                                                                   if (jjtc014) {
                                                                                                                     jjtree.closeNodeScope(jjtn014,  3);
                                                                                                                   }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ifstatement() throws ParseException {
 /*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        statement();
                                                                           jjtn000.ifHasElse = true;
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void forloop() throws ParseException {
 /*@bgen(jjtree) ForLoop */
  ASTForLoop jjtn000 = new ASTForLoop(JJTFORLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      jj_consume_token(LPAREN);
      assignment();
      jj_consume_token(SEMICOLON);
      expression();
      jj_consume_token(SEMICOLON);
      assignment();
      jj_consume_token(RPAREN);
      statement();
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void whileloop() throws ParseException {
 /*@bgen(jjtree) WhileLoop */
  ASTWhileLoop jjtn000 = new ASTWhileLoop(JJTWHILELOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      statement();
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

/*
	for (i = 1 to 10) {
	
	}
*/
  final public void fortoloop() throws ParseException {
 /*@bgen(jjtree) ForToLoop */
  ASTForToLoop jjtn000 = new ASTForToLoop(JJTFORTOLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      jj_consume_token(LPAREN);
      identifier();
      jj_consume_token(COMMA);
      expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        expression();
                                                                     jjtn000.loopHasStart = true;
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        expression();
                                                                     jjtn000.loopHasStep = true;
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      statement();
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void print() throws ParseException {
    jj_consume_token(PRINT);
    jj_consume_token(LPAREN);
    expression();
                                                                   ASTPrint jjtn001 = new ASTPrint(JJTPRINT);
                                                                   boolean jjtc001 = true;
                                                                   jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(RPAREN);
    } finally {
                                                                   if (jjtc001) {
                                                                     jjtree.closeNodeScope(jjtn001,  1);
                                                                   }
    }
  }

  final public void println() throws ParseException {
    jj_consume_token(PRINTLN);
    jj_consume_token(LPAREN);
    expression();
                                                                     ASTPrintLn jjtn001 = new ASTPrintLn(JJTPRINTLN);
                                                                     boolean jjtc001 = true;
                                                                     jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(RPAREN);
    } finally {
                                                                     if (jjtc001) {
                                                                       jjtree.closeNodeScope(jjtn001,  1);
                                                                     }
    }
  }

  final public void quit() throws ParseException {
    jj_consume_token(QUIT);
    jj_consume_token(LPAREN);
                                                     ASTQuit jjtn001 = new ASTQuit(JJTQUIT);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(RPAREN);
    } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001, true);
                                                     }
    }
  }

  final public void call() throws ParseException {
 /*@bgen(jjtree) Call */
  ASTCall jjtn000 = new ASTCall(JJTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
      arglist();
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void arglist() throws ParseException {
 /*@bgen(jjtree) ArgList */
  ASTArgList jjtn000 = new ASTArgList(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case PLUS:
      case SUBT:
        expression();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        expression();
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

//
// Expressions
//
  final public void expression() throws ParseException {
    or_expression();
  }

  final public void or_expression() throws ParseException {
    and_expression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      jj_consume_token(OR);
                                                        ASTOr jjtn001 = new ASTOr(JJTOR);
                                                        boolean jjtc001 = true;
                                                        jjtree.openNodeScope(jjtn001);
      try {
        and_expression();
      } catch (Throwable jjte001) {
                                                        if (jjtc001) {
                                                          jjtree.clearNodeScope(jjtn001);
                                                          jjtc001 = false;
                                                        } else {
                                                          jjtree.popNode();
                                                        }
                                                        if (jjte001 instanceof RuntimeException) {
                                                          {if (true) throw (RuntimeException)jjte001;}
                                                        }
                                                        if (jjte001 instanceof ParseException) {
                                                          {if (true) throw (ParseException)jjte001;}
                                                        }
                                                        {if (true) throw (Error)jjte001;}
      } finally {
                                                        if (jjtc001) {
                                                          jjtree.closeNodeScope(jjtn001,  2);
                                                        }
      }
    }
  }

  final public void and_expression() throws ParseException {
    compare_expression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      jj_consume_token(AND);
                                                             ASTAnd jjtn001 = new ASTAnd(JJTAND);
                                                             boolean jjtc001 = true;
                                                             jjtree.openNodeScope(jjtn001);
      try {
        compare_expression();
      } catch (Throwable jjte001) {
                                                             if (jjtc001) {
                                                               jjtree.clearNodeScope(jjtn001);
                                                               jjtc001 = false;
                                                             } else {
                                                               jjtree.popNode();
                                                             }
                                                             if (jjte001 instanceof RuntimeException) {
                                                               {if (true) throw (RuntimeException)jjte001;}
                                                             }
                                                             if (jjte001 instanceof ParseException) {
                                                               {if (true) throw (ParseException)jjte001;}
                                                             }
                                                             {if (true) throw (Error)jjte001;}
      } finally {
                                                             if (jjtc001) {
                                                               jjtree.closeNodeScope(jjtn001,  2);
                                                             }
      }
    }
  }

  final public void compare_expression() throws ParseException {
    add_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case GT:
    case LT:
    case LE:
    case GE:
    case 79:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
                                         ASTCompEqual jjtn001 = new ASTCompEqual(JJTCOMPEQUAL);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
        try {
          add_expression();
        } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte001;}
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte001;}
                                         }
                                         {if (true) throw (Error)jjte001;}
        } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                         }
        }
        break;
      case 79:
        jj_consume_token(79);
                                        ASTCompNequal jjtn002 = new ASTCompNequal(JJTCOMPNEQUAL);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
        try {
          add_expression();
        } catch (Throwable jjte002) {
                                        if (jjtc002) {
                                          jjtree.clearNodeScope(jjtn002);
                                          jjtc002 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte002 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte002;}
                                        }
                                        if (jjte002 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte002;}
                                        }
                                        {if (true) throw (Error)jjte002;}
        } finally {
                                        if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                        }
        }
        break;
      case GE:
        jj_consume_token(GE);
                                        ASTCompGTE jjtn003 = new ASTCompGTE(JJTCOMPGTE);
                                        boolean jjtc003 = true;
                                        jjtree.openNodeScope(jjtn003);
        try {
          add_expression();
        } catch (Throwable jjte003) {
                                        if (jjtc003) {
                                          jjtree.clearNodeScope(jjtn003);
                                          jjtc003 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte003 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte003;}
                                        }
                                        if (jjte003 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte003;}
                                        }
                                        {if (true) throw (Error)jjte003;}
        } finally {
                                        if (jjtc003) {
                                          jjtree.closeNodeScope(jjtn003,  2);
                                        }
        }
        break;
      case LE:
        jj_consume_token(LE);
                                        ASTCompLTE jjtn004 = new ASTCompLTE(JJTCOMPLTE);
                                        boolean jjtc004 = true;
                                        jjtree.openNodeScope(jjtn004);
        try {
          add_expression();
        } catch (Throwable jjte004) {
                                        if (jjtc004) {
                                          jjtree.clearNodeScope(jjtn004);
                                          jjtc004 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte004 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte004;}
                                        }
                                        if (jjte004 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte004;}
                                        }
                                        {if (true) throw (Error)jjte004;}
        } finally {
                                        if (jjtc004) {
                                          jjtree.closeNodeScope(jjtn004,  2);
                                        }
        }
        break;
      case GT:
        jj_consume_token(GT);
                                        ASTCompGT jjtn005 = new ASTCompGT(JJTCOMPGT);
                                        boolean jjtc005 = true;
                                        jjtree.openNodeScope(jjtn005);
        try {
          add_expression();
        } catch (Throwable jjte005) {
                                        if (jjtc005) {
                                          jjtree.clearNodeScope(jjtn005);
                                          jjtc005 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte005 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte005;}
                                        }
                                        if (jjte005 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte005;}
                                        }
                                        {if (true) throw (Error)jjte005;}
        } finally {
                                        if (jjtc005) {
                                          jjtree.closeNodeScope(jjtn005,  2);
                                        }
        }
        break;
      case LT:
        jj_consume_token(LT);
                                        ASTCompLT jjtn006 = new ASTCompLT(JJTCOMPLT);
                                        boolean jjtc006 = true;
                                        jjtree.openNodeScope(jjtn006);
        try {
          add_expression();
        } catch (Throwable jjte006) {
                                        if (jjtc006) {
                                          jjtree.clearNodeScope(jjtn006);
                                          jjtc006 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte006 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte006;}
                                        }
                                        if (jjte006 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte006;}
                                        }
                                        {if (true) throw (Error)jjte006;}
        } finally {
                                        if (jjtc006) {
                                          jjtree.closeNodeScope(jjtn006,  2);
                                        }
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  final public void add_expression() throws ParseException {
    mul_expression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case SUBT:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                                         ASTAdd jjtn001 = new ASTAdd(JJTADD);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
        try {
          mul_expression();
        } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte001;}
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte001;}
                                         }
                                         {if (true) throw (Error)jjte001;}
        } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                         }
        }
        break;
      case SUBT:
        jj_consume_token(SUBT);
                                         ASTSubtract jjtn002 = new ASTSubtract(JJTSUBTRACT);
                                         boolean jjtc002 = true;
                                         jjtree.openNodeScope(jjtn002);
        try {
          mul_expression();
        } catch (Throwable jjte002) {
                                         if (jjtc002) {
                                           jjtree.clearNodeScope(jjtn002);
                                           jjtc002 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte002 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte002;}
                                         }
                                         if (jjte002 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte002;}
                                         }
                                         {if (true) throw (Error)jjte002;}
        } finally {
                                         if (jjtc002) {
                                           jjtree.closeNodeScope(jjtn002,  2);
                                         }
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void mul_expression() throws ParseException {
    unary_expression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HOOK:
      case STAR:
      case SLASH:
      case REM:
      case POW:
      case SQRT:
      case 80:
      case 81:
      case 82:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
                                        ASTTimes jjtn001 = new ASTTimes(JJTTIMES);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
        try {
          unary_expression();
        } catch (Throwable jjte001) {
                                        if (jjtc001) {
                                          jjtree.clearNodeScope(jjtn001);
                                          jjtc001 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte001 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte001;}
                                        }
                                        if (jjte001 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte001;}
                                        }
                                        {if (true) throw (Error)jjte001;}
        } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001,  2);
                                        }
        }
        break;
      case SLASH:
        jj_consume_token(SLASH);
                                        ASTDivide jjtn002 = new ASTDivide(JJTDIVIDE);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
        try {
          unary_expression();
        } catch (Throwable jjte002) {
                                        if (jjtc002) {
                                          jjtree.clearNodeScope(jjtn002);
                                          jjtc002 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte002 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte002;}
                                        }
                                        if (jjte002 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte002;}
                                        }
                                        {if (true) throw (Error)jjte002;}
        } finally {
                                        if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                        }
        }
        break;
      case REM:
        jj_consume_token(REM);
                                        ASTRemainder jjtn003 = new ASTRemainder(JJTREMAINDER);
                                        boolean jjtc003 = true;
                                        jjtree.openNodeScope(jjtn003);
        try {
          unary_expression();
        } catch (Throwable jjte003) {
                                        if (jjtc003) {
                                          jjtree.clearNodeScope(jjtn003);
                                          jjtc003 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte003 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte003;}
                                        }
                                        if (jjte003 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte003;}
                                        }
                                        {if (true) throw (Error)jjte003;}
        } finally {
                                        if (jjtc003) {
                                          jjtree.closeNodeScope(jjtn003,  2);
                                        }
        }
        break;
      case POW:
        jj_consume_token(POW);
                                        ASTPow jjtn004 = new ASTPow(JJTPOW);
                                        boolean jjtc004 = true;
                                        jjtree.openNodeScope(jjtn004);
        try {
          unary_expression();
        } catch (Throwable jjte004) {
                                        if (jjtc004) {
                                          jjtree.clearNodeScope(jjtn004);
                                          jjtc004 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte004 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte004;}
                                        }
                                        if (jjte004 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte004;}
                                        }
                                        {if (true) throw (Error)jjte004;}
        } finally {
                                        if (jjtc004) {
                                          jjtree.closeNodeScope(jjtn004,  2);
                                        }
        }
        break;
      case SQRT:
        jj_consume_token(SQRT);
                                         ASTSqrt jjtn005 = new ASTSqrt(JJTSQRT);
                                         boolean jjtc005 = true;
                                         jjtree.openNodeScope(jjtn005);
        try {
          unary_expression();
        } catch (Throwable jjte005) {
                                         if (jjtc005) {
                                           jjtree.clearNodeScope(jjtn005);
                                           jjtc005 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte005 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte005;}
                                         }
                                         if (jjte005 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte005;}
                                         }
                                         {if (true) throw (Error)jjte005;}
        } finally {
                                         if (jjtc005) {
                                           jjtree.closeNodeScope(jjtn005,  2);
                                         }
        }
        break;
      case HOOK:
        jj_consume_token(HOOK);
                                        ASTRandom jjtn006 = new ASTRandom(JJTRANDOM);
                                        boolean jjtc006 = true;
                                        jjtree.openNodeScope(jjtn006);
        try {
          unary_expression();
        } catch (Throwable jjte006) {
                                        if (jjtc006) {
                                          jjtree.clearNodeScope(jjtn006);
                                          jjtc006 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte006 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte006;}
                                        }
                                        if (jjte006 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte006;}
                                        }
                                        {if (true) throw (Error)jjte006;}
        } finally {
                                        if (jjtc006) {
                                          jjtree.closeNodeScope(jjtn006,  2);
                                        }
        }
        break;
      case 80:
        jj_consume_token(80);
                                        ASTFloor jjtn007 = new ASTFloor(JJTFLOOR);
                                        boolean jjtc007 = true;
                                        jjtree.openNodeScope(jjtn007);
        try {
          unary_expression();
        } catch (Throwable jjte007) {
                                        if (jjtc007) {
                                          jjtree.clearNodeScope(jjtn007);
                                          jjtc007 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte007 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte007;}
                                        }
                                        if (jjte007 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte007;}
                                        }
                                        {if (true) throw (Error)jjte007;}
        } finally {
                                        if (jjtc007) {
                                          jjtree.closeNodeScope(jjtn007,  2);
                                        }
        }
        break;
      case 81:
        jj_consume_token(81);
                                        ASTCos jjtn008 = new ASTCos(JJTCOS);
                                        boolean jjtc008 = true;
                                        jjtree.openNodeScope(jjtn008);
        try {
          unary_expression();
        } catch (Throwable jjte008) {
                                        if (jjtc008) {
                                          jjtree.clearNodeScope(jjtn008);
                                          jjtc008 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte008 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte008;}
                                        }
                                        if (jjte008 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte008;}
                                        }
                                        {if (true) throw (Error)jjte008;}
        } finally {
                                        if (jjtc008) {
                                          jjtree.closeNodeScope(jjtn008,  2);
                                        }
        }
        break;
      case 82:
        jj_consume_token(82);
                                         ASTSin jjtn009 = new ASTSin(JJTSIN);
                                         boolean jjtc009 = true;
                                         jjtree.openNodeScope(jjtn009);
        try {
          unary_expression();
        } catch (Throwable jjte009) {
                                         if (jjtc009) {
                                           jjtree.clearNodeScope(jjtn009);
                                           jjtc009 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte009 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte009;}
                                         }
                                         if (jjte009 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte009;}
                                         }
                                         {if (true) throw (Error)jjte009;}
        } finally {
                                         if (jjtc009) {
                                           jjtree.closeNodeScope(jjtn009,  2);
                                         }
        }
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void unary_expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
                                      ASTUnaryNot jjtn001 = new ASTUnaryNot(JJTUNARYNOT);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
      try {
        unary_expression();
      } catch (Throwable jjte001) {
                                      if (jjtc001) {
                                        jjtree.clearNodeScope(jjtn001);
                                        jjtc001 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte001 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte001;}
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte001;}
                                      }
                                      {if (true) throw (Error)jjte001;}
      } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  1);
                                      }
      }
      break;
    case PLUS:
      jj_consume_token(PLUS);
                                      ASTUnaryPlus jjtn002 = new ASTUnaryPlus(JJTUNARYPLUS);
                                      boolean jjtc002 = true;
                                      jjtree.openNodeScope(jjtn002);
      try {
        unary_expression();
      } catch (Throwable jjte002) {
                                      if (jjtc002) {
                                        jjtree.clearNodeScope(jjtn002);
                                        jjtc002 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte002 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte002;}
                                      }
                                      if (jjte002 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte002;}
                                      }
                                      {if (true) throw (Error)jjte002;}
      } finally {
                                      if (jjtc002) {
                                        jjtree.closeNodeScope(jjtn002,  1);
                                      }
      }
      break;
    case SUBT:
      jj_consume_token(SUBT);
                                      ASTUnaryMinus jjtn003 = new ASTUnaryMinus(JJTUNARYMINUS);
                                      boolean jjtc003 = true;
                                      jjtree.openNodeScope(jjtn003);
      try {
        unary_expression();
      } catch (Throwable jjte003) {
                                      if (jjtc003) {
                                        jjtree.clearNodeScope(jjtn003);
                                        jjtc003 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte003 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte003;}
                                      }
                                      if (jjte003 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte003;}
                                      }
                                      {if (true) throw (Error)jjte003;}
      } finally {
                                      if (jjtc003) {
                                        jjtree.closeNodeScope(jjtn003,  1);
                                      }
      }
      break;
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
      primary_expression();
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void primary_expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
      literal();
      break;
    default:
      jj_la1[22] = jj_gen;
      if (jj_2_24(2)) {
        fn_invoke();
      } else if (jj_2_25(2)) {
        arrayindex();
      } else if (jj_2_26(2)) {
        array_function();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          dereference();
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          expression();
          jj_consume_token(RPAREN);
          break;
        case LBRACKET:
          arraylist();
          break;
        case LBRACE:
          dictionarylist();
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void arrayindex() throws ParseException {
    identifier();
    jj_consume_token(LBRACKET);
    expression();
                                                                ASTArrayGetIndex jjtn001 = new ASTArrayGetIndex(JJTARRAYGETINDEX);
                                                                boolean jjtc001 = true;
                                                                jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(RBRACKET);
    } finally {
                                                                if (jjtc001) {
                                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                                }
    }
  }

  final public void arraylist() throws ParseException {
 /*@bgen(jjtree) ArrayList */
  ASTArrayList jjtn000 = new ASTArrayList(JJTARRAYLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case PLUS:
      case SUBT:
        expression();
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[24] = jj_gen;
            break label_10;
          }
          jj_consume_token(COMMA);
          expression();
        }
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
                                                          if (jjtc000) {
                                                            jjtree.clearNodeScope(jjtn000);
                                                            jjtc000 = false;
                                                          } else {
                                                            jjtree.popNode();
                                                          }
                                                          if (jjte000 instanceof RuntimeException) {
                                                            {if (true) throw (RuntimeException)jjte000;}
                                                          }
                                                          if (jjte000 instanceof ParseException) {
                                                            {if (true) throw (ParseException)jjte000;}
                                                          }
                                                          {if (true) throw (Error)jjte000;}
    } finally {
                                                          if (jjtc000) {
                                                            jjtree.closeNodeScope(jjtn000, true);
                                                          }
    }
  }

  final public void dictionarylist() throws ParseException {
 /*@bgen(jjtree) DictionaryList */
  ASTDictionaryList jjtn000 = new ASTDictionaryList(JJTDICTIONARYLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
        character();
        jj_consume_token(COLON);
        literal();
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[26] = jj_gen;
            break label_11;
          }
          jj_consume_token(COMMA);
          character();
          jj_consume_token(COLON);
          literal();
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
                                                          if (jjtc000) {
                                                            jjtree.clearNodeScope(jjtn000);
                                                            jjtc000 = false;
                                                          } else {
                                                            jjtree.popNode();
                                                          }
                                                          if (jjte000 instanceof RuntimeException) {
                                                            {if (true) throw (RuntimeException)jjte000;}
                                                          }
                                                          if (jjte000 instanceof ParseException) {
                                                            {if (true) throw (ParseException)jjte000;}
                                                          }
                                                          {if (true) throw (Error)jjte000;}
    } finally {
                                                          if (jjtc000) {
                                                            jjtree.closeNodeScope(jjtn000, true);
                                                          }
    }
  }

  final public void fn_invoke() throws ParseException {
 /*@bgen(jjtree) FnInvoke */
  ASTFnInvoke jjtn000 = new ASTFnInvoke(JJTFNINVOKE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
      arglist();
    } catch (Throwable jjte000) {
                                                          if (jjtc000) {
                                                            jjtree.clearNodeScope(jjtn000);
                                                            jjtc000 = false;
                                                          } else {
                                                            jjtree.popNode();
                                                          }
                                                          if (jjte000 instanceof RuntimeException) {
                                                            {if (true) throw (RuntimeException)jjte000;}
                                                          }
                                                          if (jjte000 instanceof ParseException) {
                                                            {if (true) throw (ParseException)jjte000;}
                                                          }
                                                          {if (true) throw (Error)jjte000;}
    } finally {
                                                          if (jjtc000) {
                                                            jjtree.closeNodeScope(jjtn000, true);
                                                          }
    }
  }

  final public void literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      integer();
      break;
    case STRING_LITERAL:
      character();
      break;
    case FLOATING_POINT_LITERAL:
      rational();
      break;
    case TRUE:
    case FALSE:
      bool();
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void identifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
 ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          jjtn000.tokenValue = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void dereference() throws ParseException {
 /*@bgen(jjtree) Dereference */
 ASTDereference jjtn000 = new ASTDereference(JJTDEREFERENCE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          jjtn000.tokenValue = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void character() throws ParseException {
 /*@bgen(jjtree) Character */
 ASTCharacter jjtn000 = new ASTCharacter(JJTCHARACTER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING_LITERAL);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              jjtn000.tokenValue = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void integer() throws ParseException {
 /*@bgen(jjtree) Integer */
 ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INTEGER_LITERAL);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                               jjtn000.tokenValue = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void rational() throws ParseException {
 /*@bgen(jjtree) Rational */
 ASTRational jjtn000 = new ASTRational(JJTRATIONAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FLOATING_POINT_LITERAL);
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                      jjtn000.tokenValue = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void bool() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
                                ASTTrue jjtn001 = new ASTTrue(JJTTRUE);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(TRUE);
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                }
      }
      break;
    case FALSE:
                    ASTFalse jjtn002 = new ASTFalse(JJTFALSE);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(FALSE);
      } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
      }
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(78)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(69)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(77)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_18()) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(75)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(74)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(72)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(71)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(70)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(69)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(68)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(MEQ)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(PEQ)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(SUBT)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(82)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(81)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(80)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(HOOK)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(SQRT)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(POW)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(SUBT)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(79)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_30()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_28()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_18()) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SiliTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xf8a00,0x80200,0x78000,0xf8a00,0x0,0x0,0xf8a00,0x100000,0x400,0x0,0x0,0x47800000,0x0,0x200000,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x47800000,0x47000000,0x0,0x0,0x47800000,0x0,0x0,0x47000000,0x3000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x42,0x40,0x0,0x42,0x800,0x2,0x42,0x0,0x0,0x800,0x800,0x18000153,0x800,0x0,0x0,0xf80000,0xf80000,0x18000000,0x18000000,0xe2000000,0xe2000000,0x18000153,0x1,0x152,0x800,0x18000153,0x800,0x1,0x1,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x8000,0x0,0x0,0x70003,0x70003,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[26];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Sili(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Sili(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SiliTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Sili(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SiliTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Sili(SiliTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SiliTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[83];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 83; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 26; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                   }
